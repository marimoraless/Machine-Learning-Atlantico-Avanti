Atividade 01 - MCL 2023.2

Exercício 01 - MCL 2023.2 
Escreva uma função que receba uma lista de números e retorne outra lista com os números primos presentes:

Resposta:
def é_primo(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def lista_de_primos(numeros):
    primos = []
    for num in numeros:
        if é_primo(num):
            primos.append(num)
    return primos

numeros = list(map(int, input("Digite uma lista de números para verificar se é primo: ").replace(",", " ").split()))

if numeros:
    print(f"Números primos: {lista_de_primos(numeros)}")
else:
    print("Números primos: Nenhum número inserido")

----------------------------------------------------------------------------------------------------------------

Exercício 02 - MCL 2023.2
Escreva uma função que receba duas listas e retorne outra lista com os elementos que estão presentes em apenas uma das listas.

Resposta:

def listas_juntas(list1, list2):

    elementos_unicos = list1 + list2

    elementos_unicos = set(elementos_unicos)

    contagem = {elemento: (list1.count(elemento), list2.count(elemento)) for elemento in elementos_unicos}

    elementos_unicos = [elemento for elemento, contagem in contagem.items() if contagem[0] == 0 or contagem[1] == 0]

    return elementos_unicos

list1 = input("Digite a primeira lista: ").replace(",", " ").split()
list2 = input("Digite a segunda lista: ").replace(",", " ").split()

resultado = listas_juntas(list1, list2)
print("Elementos que estão presentes em apenas uma das listas:", resultado)

-------------------------------------------------------------------------------------------------------------------

Exercício 03 - MCL 2023.2
Dada uma lista de números inteiros, escreva uma função para encontrar o segundo maior valor na lista.

Resposta:
def segunda_maior(lista):
    lista.sort(reverse=True)
    for num in lista:
        if num != lista[0]:
            return num
    return None
lista = input("Digite uma lista de números inteiros: ").replace("," , " ").split()
lista = list(map(int, lista))
resultado = segunda_maior(lista)
if resultado is not None:
    print("O segundo maior valor da lista é:", resultado)
else:
    print("A lista não possui um segundo maior valor.")

-------------------------------------------------------------------------------------------------------------------

Exercício 04 - MCL 2023.2
Crie uma função que receba uma lista de tuplas, cada uma contendo o nome e a idade de uma pessoa, e retorne a lista ordenada pelo nome das pessoas em ordem alfabética.

Resposta:
def main():
    pessoas = []
    while True:
        nome = input("Digite o nome da pessoa (ou 'Pare' para encerrar a lista): ")
        if nome.lower() == 'pare':
            break
        idade = int(input("Digite a idade da pessoa: "))
        pessoas.append((nome, idade))
    pessoas_ordenadas = sorted(pessoas, key=lambda tupla: tupla[0])
    print("\nLista de pessoas em ordem alfabética:")
    for pessoa in pessoas_ordenadas:
        print(f"{pessoa[0]}, {pessoa[1]} anos")

if __name__ == "__main__":
    main()

----------------------------------------------------------------------------------------------------------------------

Exercício 05 - MCL 2023.2 
Dada uma lista contendo números inteiros, como você encontraria o maior número e o menor número dessa lista em uma única passagem?

Resposta:
def encontrar_maior_e_menor(lista):
    maior = lista[0]
    menor = lista[0]
    for num in lista:
        if num > maior:
            maior = num
        elif num < menor:
            menor = num
    return maior, menor
lista = input("Digite uma lista de números inteiros: ")
lista = [int(num) for num in lista.replace(',', ' ').replace('.', ' ').split()]
maior, menor = encontrar_maior_e_menor(lista)
print("O maior número é:", maior)
print("O menor número é:", menor)

--------------------------------------------------------------------------------------------------------------------

Exercício 06 - MCL 2023.2 
Utilizando pandas, como realizar a leitura de um arquivo CSV em um DataFrame e exibir as primeiras linhas?

Resposta:
Para realizar a leitura de um arquivo CSV em um DataFrame e exibir as primeiras linhas, é necessário importar a biblioteca pandas, após isso é utilizado "read_csv" para ler o arquivo CSV, depois utiliza-se "head" e exibirá as primeiras linhas do DataFrame.

import pandas as pd
df = pd.read_csv('seu_arquivo.csv')
print(df.head())

---------------------------------------------------------------------------------------------------------------------

Exercício 07 - MCL 2023.2 
Utilizando pandas, como selecionar uma coluna específica e filtrar linhas em um “DataFrame” com base em uma condição?

Resposta:
Para selecionar uma coluna específica em um DataFrame pode-se usar a notação de colchetes e passar o nome da coluna como uma string e para filtrar linhas em um DataFrame com base em uma condição, pode-se usar a indexação booleana. 

Exemplo: 
import pandas as pd
df = pd.read_csv('arquivo.csv')
coluna = df['nome_da_coluna']
filtro = df['nome_da_coluna'] > valor
df_filtrado = df[filtro]

Explicação desse exmemplo de código: Para selecionar uma coluna específica e filtrar linhas em um DataFrame com base em uma condição, é necessário importar a biblioteca pandas para ler um arquivo CSV chamado no código de 'arquivo.csv'. 
Após isso, ele seleciona a coluna que no código está como 'nome_da_coluna' em colchetes e assim cria um filtro para armazenar apenas as linhas onde o valor dessa coluna é maior que 'valor'. 
Assim ele aplica o filtro a variável df e armazena o resultado na variável df_filtrado.
Com isso o código retorna uma tabela contendo todas as informações do arquivo CSV, mas apenas as linhas onde a coluna 'nome_da_coluna' possui um valor maior que 'valor' são colocadas na tabela final.

------------------------------------------------------------------------------------------------------------------

Exercício 08 - MCL 2023.2   
Utilizando pandas, como lidar com valores ausentes (NaN) em um DataFrame? 

Resposta:
Para lidar com valores ausentes em um DataFrame utlizando o pandas, pode-se excluir as colunas ou linhas que possuem valores ausentes utilizando o método dropna(), ou também uma outra forma pode-se preencher os valores com um valor específico utilizando o método fillna().

------------------------------------------------------------------------------------------------------------------

Exercício 09 - MCL 2023.2 
Complete o código:


import __________.pyplot as plt

import numpy as ___


fig, axs = plt.subplots(ncols=2, nrows=2, figsize=(5.5, 3.5),

                        layout="constrained")

Resposta:

import matplotlib.pyplot as plt

import numpy as np


fig, axs = plt.subplots(ncols=2, nrows=2, figsize=(5.5, 3.5),

                        layout="constrained")

----------------------------------------------------------------------------------------------------------

Exercício 10 - MCL 2023.2 
Complete o código:

import numpy as np

import __________ as mpl

import __________.______ as plt


x = np.________(-2 * np.pi, 2 * np.pi, 100)

y = np.____(x)


__, __ = plt.subplots()

ax.____(_, _)


Resposta:

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

x = np.linspace(-2 * np.pi, 2 * np.pi, 100)
y = np.sin(x)

fig, ax = plt.subplots()
ax.plot(x, y)   

------------------------------------------------------------------------------------------------------------
